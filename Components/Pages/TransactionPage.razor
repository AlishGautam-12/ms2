@page "/transactionPage"
@using ms2.Models
@inject UserService UserService

<h1>User Transactions</h1>

<style>
    .filter-section {
        display: flex;
        gap: 10px;
        align-items: center;
        margin-bottom: 20px;
    }

    .filter-input {
        width: 200px;
    }

    .filter-btn {
        margin-left: 10px;
    }
</style>

<!-- Filter Section (Inline with Internal CSS) -->
<div class="filter-section">
    <input type="text" @bind="searchDescription" placeholder="Search by notes" class="form-control filter-input" />
    <select @bind="filterType" class="form-control filter-input">
        <option value="">All Types</option>
        <option value="Credit">Credit</option>
        <option value="Debit">Debit</option>
    </select>
    <input type="date" @bind="startDate" class="form-control filter-input" />
    <input type="date" @bind="endDate" class="form-control filter-input" />
    <button @onclick="FilterTransactions" class="btn btn-primary filter-btn">Filter</button>
</div>

<!-- Transactions Table -->
@if (filteredTransactions.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Transaction ID</th>
                <th>Main Balance</th>
                <th>Type</th>
                <th>Debit</th>
                <th>Credit</th>
                <th>Tags</th>
                <th>Date</th>
                <th>Notes</th>
                <th>Debt Cleared Notes</th> <!-- New Column -->
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in filteredTransactions)
            {
                <tr>
                    <td>@transaction.Id</td>
                    <td>@GetMainBalance()</td>
                    <td>@transaction.Type</td>
                    <td>@transaction.Debit.ToString("C")</td>
                    <td>@transaction.Credit.ToString("C")</td>
                    <td>@string.Join(", ", transaction.Tags ?? new List<string>())</td>
                    <td>@transaction.Date.ToString("MM/dd/yyyy")</td>
                    <td>@transaction.Description</td>
                    <td>@transaction.DebtClearedNotes</td> <!-- Display Debt Cleared Notes -->
                    <td>
                        <button class="btn btn-warning" @onclick="() => EditTransaction(transaction)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTransaction(transaction.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}
else
{
    <p>No transactions made in the selected date range.</p>
}

<h2>@(isEditMode ? "Edit" : "Add New") Transaction</h2>
<EditForm Model="newTransaction" OnValidSubmit="HandleTransactionSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="type">Transaction Type</label>
        <InputSelect id="type" @bind-Value="newTransaction.Type" class="form-control" @onchange="OnTransactionTypeChange">
            <option value="">Select Type</option>
            <option value="Credit">Credit</option>
            <option value="Debit">Debit</option>
        </InputSelect>
    </div>

    @if (newTransaction.Type == "Credit" || newTransaction.Type == "Debit")
    {
        <div class="form-group">
            <label for="amount">Amount (@(newTransaction.Type))</label>
            <InputNumber id="amount" @bind-Value="newTransaction.Amount" class="form-control" />
            @if (newTransaction.Amount <= 0)
            {
                <span class="text-danger">Amount must be greater than zero.</span>
            }
            @if (newTransaction.Type == "Debit" && !IsSufficientBalance(newTransaction.Amount))
            {
                <span class="text-danger">Insufficient balance for this outflow.</span>
            }
        </div>

        <div class="form-group">
            <label for="tags">Tags (Select One or More)</label>
            <select multiple class="form-control" @onchange="OnTagsChange">
                @foreach (var tag in defaultTags)
                {
                    <option value="@tag" selected="@(selectedTags.Contains(tag))">@tag</option>
                }
            </select>
        </div>

        <!-- Manual Description -->
        <div class="form-group">
            <label for="notes">Notes</label>
            <InputText id="notes" @bind-Value="newTransaction.Description" class="form-control" placeholder="Enter a description for the notes" />
        </div>

        @if (newTransaction.Type == "Credit")
        {
            <!-- Debt Cleared Notes for Credit Transactions -->
            <div class="form-group">
                <label for="debtClearedNotes">Debt Cleared Notes</label>
                <InputText id="debtClearedNotes" @bind-Value="newTransaction.DebtClearedNotes" class="form-control" placeholder="Enter notes for debt clearance (if any)" />
            </div>
        }
    }

    <div class="form-group">
        <button type="submit" class="btn btn-primary" disabled="@(!CanSubmitTransaction())">@(isEditMode ? "Update" : "Add") Transaction</button>
    </div>
</EditForm>

