@page "/register"
@inject UserService UserService
@using ms2.Models
@inject NavigationManager NavigationManager

<div class="register-container">
    <div class="register-form">
        <h2 class="form-title">Create Account</h2>
        <input @bind="RegisterUsername" placeholder="Username" class="input-field" />
        <input @bind="RegisterPassword" placeholder="Password" type="password" class="input-field" />
        <input @bind="RegisterEmail" placeholder="Email" class="input-field" />
        <button @onclick="RegisterUser" class="register-button">Register</button>

        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="message">@Message</p>
        }

        <div class="login-link">
            <p>Already registered? <a href="/login">Login here</a></p>
        </div>
    </div>
</div>

<style>
    /* Main container with centering */
    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #f4f4f4;
        padding: 20px;
    }

    /* Form styling */
    .register-form {
        background-color: white;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    /* Title of the form */
    .form-title {
        text-align: center;
        font-size: 24px;
        color: #333;
        margin-bottom: 20px;
    }

    /* Input field styling */
    .input-field {
        width: 100%;
        padding: 12px;
        margin: 10px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
        box-sizing: border-box;
    }

    /* Button styling */
    .register-button {
        width: 100%;
        padding: 12px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        box-sizing: border-box;
    }

        .register-button:hover {
            background-color: #45a049;
        }

    /* Error message styling */
    .message {
        color: #d9534f;
        text-align: center;
        margin-top: 15px;
        font-size: 14px;
    }

    /* Link for login */
    .login-link {
        text-align: center;
        margin-top: 20px;
    }

        .login-link a {
            color: #4CAF50;
            text-decoration: none;
        }

            .login-link a:hover {
                text-decoration: underline;
            }
</style>

@code {
    private string RegisterUsername = "";
    private string RegisterPassword = "";
    private string RegisterEmail = "";
    private string Message = "";
    private bool IsRegistrationSuccessful = false;

    private async Task RegisterUser()
    {
        // Input validation
        if (string.IsNullOrWhiteSpace(RegisterUsername) || string.IsNullOrWhiteSpace(RegisterPassword))
        {
            Message = "Username and password are required.";
            return;
        }

        // Load existing users
        var users = UserService.LoadUsers();

        // Check if the username already exists
        if (users.Any(u => u.Username == RegisterUsername))
        {
            // Inform the user that the username is already taken
            Message = "Username already exists. Please login.";
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/login");
            return;
        }

        // Create new user and hash the password
        var newUser = new User
            {
                Username = RegisterUsername,
                Password = UserService.HashPassword(RegisterPassword),
                Email = RegisterEmail
            };

        // Save the new user
        users.Add(newUser);
        UserService.SaveUsers(users);

        // Set successful registration message
        Message = "Registration successful! Redirecting to login...";
        IsRegistrationSuccessful = true;
        await Task.Delay(2000);
        NavigationManager.NavigateTo("/login");
    }
}
