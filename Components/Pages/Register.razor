@* @page "/register" *@
@* @inject UserService UserService *@
@* @inject NavigationManager NavigationManager *@

@* <h3>Register</h3> *@

@* @if (successMessage != null) *@
@* { *@
@*         <div class="alert alert-success">@successMessage</div> *@
@* } *@
@* @if (errorMessage != null) *@
@* { *@
@*         <div class="alert alert-danger">@errorMessage</div> *@
@* } *@

@* <EditForm Model="user" OnValidSubmit="RegisterUser"> *@
@*     <DataAnnotationsValidator /> *@
@*     <ValidationSummary /> *@

@*     <div class="mb-3"> *@
@*         <label for="username" class="form-label">Username</label> *@
@*         <InputText id="username" class="form-control" @bind-Value="user.Username" /> *@
@*         <ValidationMessage For="@(() => user.Username)" /> *@
@*     </div> *@

@*     <div class="mb-3"> *@
@*         <label for="email" class="form-label">Email</label> *@
@*         <InputText id="email" type="email" class="form-control" @bind-Value="user.Email" /> *@
@*         <ValidationMessage For="@(() => user.Email)" /> *@
@*     </div> *@

@*     <div class="mb-3"> *@
@*         <label for="password" class="form-label">Password</label> *@
@*         <InputText id="password" type="password" class="form-control" @bind-Value="user.Password" /> *@
@*         <ValidationMessage For="@(() => user.Password)" /> *@
@*     </div> *@

@*     <div class="mb-3"> *@
@*         <label for="currency" class="form-label">Currency Type</label> *@
@*         <InputSelect id="currency" class="form-select" @bind-Value="user.CurrencyType"> *@
@*             <option value="">Select Currency</option> *@
@*             <option value="USD">USD</option> *@
@*             <option value="NPR">NPR</option> *@
@*         </InputSelect> *@
@*         <ValidationMessage For="@(() => user.CurrencyType)" /> *@
@*     </div> *@

@*     <button type="submit" class="btn btn-primary">Register</button> *@
@* </EditForm> *@

@* @code { *@
@*     private UserRegistrationModel user = new UserRegistrationModel(); *@
@*     private string? successMessage; *@
@*     private string? errorMessage; *@

@*     private async Task RegisterUser() *@
@*     { *@
@*         try *@
@*         { *@
@*             // Hash the password before saving *@
@*             user.Password = UserService.HashPassword(user.Password); *@

@*             // Load existing users and check for duplicate email *@
@*             var users = UserService.LoadUsers(); *@
@*             if (users.Any(u => u.Email == user.Email)) *@
@*             { *@
@*                 errorMessage = "Email is already registered."; *@
@*                 return; *@
@*             } *@

@*             // Save the new user *@
@*             users.Add(new User *@
@*                 { *@
@*                     Username = user.Username, *@
@*                     Email = user.Email, *@
@*                     PasswordHash = user.Password, *@
@*                     CurrencyType = user.CurrencyType *@
@*                 }); *@
@*             UserService.SaveUsers(users); *@

@*             successMessage = "Registration successful! Redirecting to login..."; *@
@*             await Task.Delay(2000); *@
@*             NavigationManager.NavigateTo("/login"); *@
@*         } *@
@*         catch (Exception ex) *@
@*         { *@
@*             errorMessage = "An error occurred during registration. Please try again."; *@
@*         } *@
@*     } *@

@*     public class UserRegistrationModel *@
@*     { *@
@*         [Required] *@
@*         [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters.")] *@
@*         public string Username { get; set; } = ""; *@

@*         [Required] *@
@*         [EmailAddress(ErrorMessage = "Invalid email format.")] *@
@*         public string Email { get; set; } = ""; *@

@*         [Required] *@
@*         [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long.")] *@
@*         public string Password { get; set; } = ""; *@

@*         [Required(ErrorMessage = "Currency type is required.")] *@
@*         public string CurrencyType { get; set; } = ""; *@
@*     } *@
@* } *@
